var gameModel = (function () {
  'use strict';

  const config = {
    GET_DATA_URL: `https://raw.githubusercontent.com/akzhar/pixelhunter/master/src/js/game-model/data.json`,
    POST_DATA_URL: `https://echo.htmlacademy.ru/`,
    GAMES_COUNT: 10,
    LIVES_COUNT: 3,
    TIME_TO_ANSWER: 30000, // 30 sec
    COLOR_RED: `#d74040`,
    AnswerType: {
      PAINTING: `painting`,
      PHOTO: `photo`
    },
    QuestionType: {
      TWO_OF_TWO: `two-of-two`,
      TINDER_LIKE: `tinder-like`,
      ONE_OF_THREE: `one-of-three`
    },
    QuestionTypeToFrameSize: {
      'two-of-two': {width: 468, height: 458},
      'tinder-like': {width: 705, height: 455},
      'one-of-three': {width: 304, height: 455}
    }
  };

  class GameModel {
    constructor() {
      this._playerName = ``;
      this._lives = config.LIVES_COUNT;
      this._games = [];
      this._answers = [];
      this._isGameOver = false;
    }

    set playerName(name) {
      this._playerName = name;
    }

    get lives() {
      return this._lives;
    }

    get answers() {
      return this._answers;
    }

    get games() {
      return this._games;
    }

    get isGameOver() {
      return this._isGameOver;
    }

    reset() {
      this._lives = config.LIVES_COUNT;
      this._answers = [];
      this._isGameOver = false;
    }

    addAnswer(answer) {
      this._answers.push(answer);
    }

    minusLive() {
      if (this._lives === 0) {
        this._isGameOver = true;
      }
      if (this._lives) {
        this._lives--;
      }
    }

    static getCorrectAnswer(game) {
      const question = game.question;
      const isPainting = /\sрисунок\s/.test(question);
      const isPhoto = /\sфото\s/.test(question);
      if (isPainting) return `painting`;
      if (isPhoto) return `photo`
    }

  }

  return GameModel;

}());

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FtZS1tb2RlbC9nYW1lLW1vZGVsLmpzIiwic291cmNlcyI6WyJzcmMvanMvY29uZmlnLmpzIiwic3JjL2pzL2dhbWUtbW9kZWwvZ2FtZS1tb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb25maWcgPSB7XG4gIEdFVF9EQVRBX1VSTDogYGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9ha3poYXIvcGl4ZWxodW50ZXIvbWFzdGVyL3NyYy9qcy9nYW1lLW1vZGVsL2RhdGEuanNvbmAsXG4gIFBPU1RfREFUQV9VUkw6IGBodHRwczovL2VjaG8uaHRtbGFjYWRlbXkucnUvYCxcbiAgR0FNRVNfQ09VTlQ6IDEwLFxuICBMSVZFU19DT1VOVDogMyxcbiAgVElNRV9UT19BTlNXRVI6IDMwMDAwLCAvLyAzMCBzZWNcbiAgQ09MT1JfUkVEOiBgI2Q3NDA0MGAsXG4gIEFuc3dlclR5cGU6IHtcbiAgICBQQUlOVElORzogYHBhaW50aW5nYCxcbiAgICBQSE9UTzogYHBob3RvYFxuICB9LFxuICBRdWVzdGlvblR5cGU6IHtcbiAgICBUV09fT0ZfVFdPOiBgdHdvLW9mLXR3b2AsXG4gICAgVElOREVSX0xJS0U6IGB0aW5kZXItbGlrZWAsXG4gICAgT05FX09GX1RIUkVFOiBgb25lLW9mLXRocmVlYFxuICB9LFxuICBRdWVzdGlvblR5cGVUb0ZyYW1lU2l6ZToge1xuICAgICd0d28tb2YtdHdvJzoge3dpZHRoOiA0NjgsIGhlaWdodDogNDU4fSxcbiAgICAndGluZGVyLWxpa2UnOiB7d2lkdGg6IDcwNSwgaGVpZ2h0OiA0NTV9LFxuICAgICdvbmUtb2YtdGhyZWUnOiB7d2lkdGg6IDMwNCwgaGVpZ2h0OiA0NTV9XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbmZpZztcbiIsImltcG9ydCBjb25maWcgZnJvbSAnLi4vY29uZmlnLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2FtZU1vZGVsIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fcGxheWVyTmFtZSA9IGBgO1xuICAgIHRoaXMuX2xpdmVzID0gY29uZmlnLkxJVkVTX0NPVU5UO1xuICAgIHRoaXMuX2dhbWVzID0gW107XG4gICAgdGhpcy5fYW5zd2VycyA9IFtdO1xuICAgIHRoaXMuX2lzR2FtZU92ZXIgPSBmYWxzZTtcbiAgfVxuXG4gIHNldCBwbGF5ZXJOYW1lKG5hbWUpIHtcbiAgICB0aGlzLl9wbGF5ZXJOYW1lID0gbmFtZTtcbiAgfVxuXG4gIGdldCBsaXZlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fbGl2ZXM7XG4gIH1cblxuICBnZXQgYW5zd2VycygpIHtcbiAgICByZXR1cm4gdGhpcy5fYW5zd2VycztcbiAgfVxuXG4gIGdldCBnYW1lcygpIHtcbiAgICByZXR1cm4gdGhpcy5fZ2FtZXM7XG4gIH1cblxuICBnZXQgaXNHYW1lT3ZlcigpIHtcbiAgICByZXR1cm4gdGhpcy5faXNHYW1lT3ZlcjtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX2xpdmVzID0gY29uZmlnLkxJVkVTX0NPVU5UO1xuICAgIHRoaXMuX2Fuc3dlcnMgPSBbXTtcbiAgICB0aGlzLl9pc0dhbWVPdmVyID0gZmFsc2U7XG4gIH1cblxuICBhZGRBbnN3ZXIoYW5zd2VyKSB7XG4gICAgdGhpcy5fYW5zd2Vycy5wdXNoKGFuc3dlcik7XG4gIH1cblxuICBtaW51c0xpdmUoKSB7XG4gICAgaWYgKHRoaXMuX2xpdmVzID09PSAwKSB7XG4gICAgICB0aGlzLl9pc0dhbWVPdmVyID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2xpdmVzKSB7XG4gICAgICB0aGlzLl9saXZlcy0tO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBnZXRDb3JyZWN0QW5zd2VyKGdhbWUpIHtcbiAgICBjb25zdCBxdWVzdGlvbiA9IGdhbWUucXVlc3Rpb247XG4gICAgY29uc3QgaXNQYWludGluZyA9IC9cXHPRgNC40YHRg9C90L7Qulxccy8udGVzdChxdWVzdGlvbik7XG4gICAgY29uc3QgaXNQaG90byA9IC9cXHPRhNC+0YLQvlxccy8udGVzdChxdWVzdGlvbik7XG4gICAgaWYgKGlzUGFpbnRpbmcpIHJldHVybiBgcGFpbnRpbmdgO1xuICAgIGlmIChpc1Bob3RvKSByZXR1cm4gYHBob3RvYFxuICB9XG5cbn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7RUFBQSxNQUFNLE1BQU0sR0FBRztFQUNmLEVBQUUsWUFBWSxFQUFFLENBQUMsdUZBQXVGLENBQUM7RUFDekcsRUFBRSxhQUFhLEVBQUUsQ0FBQyw0QkFBNEIsQ0FBQztFQUMvQyxFQUFFLFdBQVcsRUFBRSxFQUFFO0VBQ2pCLEVBQUUsV0FBVyxFQUFFLENBQUM7RUFDaEIsRUFBRSxjQUFjLEVBQUUsS0FBSztFQUN2QixFQUFFLFNBQVMsRUFBRSxDQUFDLE9BQU8sQ0FBQztFQUN0QixFQUFFLFVBQVUsRUFBRTtFQUNkLElBQUksUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDO0VBQ3hCLElBQUksS0FBSyxFQUFFLENBQUMsS0FBSyxDQUFDO0VBQ2xCLEdBQUc7RUFDSCxFQUFFLFlBQVksRUFBRTtFQUNoQixJQUFJLFVBQVUsRUFBRSxDQUFDLFVBQVUsQ0FBQztFQUM1QixJQUFJLFdBQVcsRUFBRSxDQUFDLFdBQVcsQ0FBQztFQUM5QixJQUFJLFlBQVksRUFBRSxDQUFDLFlBQVksQ0FBQztFQUNoQyxHQUFHO0VBQ0gsRUFBRSx1QkFBdUIsRUFBRTtFQUMzQixJQUFJLFlBQVksRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQztFQUMzQyxJQUFJLGFBQWEsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQztFQUM1QyxJQUFJLGNBQWMsRUFBRSxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQztFQUM3QyxHQUFHO0VBQ0gsQ0FBQzs7RUNuQmMsTUFBTSxTQUFTLENBQUM7RUFDL0IsRUFBRSxXQUFXLEdBQUc7RUFDaEIsSUFBSSxJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQzFCLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO0VBQ3JDLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7RUFDckIsSUFBSSxJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztFQUN2QixJQUFJLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO0VBQzdCLEdBQUc7QUFDSDtFQUNBLEVBQUUsSUFBSSxVQUFVLENBQUMsSUFBSSxFQUFFO0VBQ3ZCLElBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7RUFDNUIsR0FBRztBQUNIO0VBQ0EsRUFBRSxJQUFJLEtBQUssR0FBRztFQUNkLElBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0VBQ3ZCLEdBQUc7QUFDSDtFQUNBLEVBQUUsSUFBSSxPQUFPLEdBQUc7RUFDaEIsSUFBSSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7RUFDekIsR0FBRztBQUNIO0VBQ0EsRUFBRSxJQUFJLEtBQUssR0FBRztFQUNkLElBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0VBQ3ZCLEdBQUc7QUFDSDtFQUNBLEVBQUUsSUFBSSxVQUFVLEdBQUc7RUFDbkIsSUFBSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUM7RUFDNUIsR0FBRztBQUNIO0VBQ0EsRUFBRSxLQUFLLEdBQUc7RUFDVixJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztFQUNyQyxJQUFJLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0VBQ3ZCLElBQUksSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7RUFDN0IsR0FBRztBQUNIO0VBQ0EsRUFBRSxTQUFTLENBQUMsTUFBTSxFQUFFO0VBQ3BCLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7RUFDL0IsR0FBRztBQUNIO0VBQ0EsRUFBRSxTQUFTLEdBQUc7RUFDZCxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7RUFDM0IsTUFBTSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztFQUM5QixLQUFLO0VBQ0wsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7RUFDckIsTUFBTSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7RUFDcEIsS0FBSztFQUNMLEdBQUc7QUFDSDtFQUNBLEVBQUUsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUU7RUFDaEMsSUFBSSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO0VBQ25DLElBQUksTUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztFQUNwRCxJQUFJLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7RUFDOUMsSUFBSSxJQUFJLFVBQVUsRUFBRSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7RUFDdEMsSUFBSSxJQUFJLE9BQU8sRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDO0VBQy9CLEdBQUc7QUFDSDtFQUNBOzs7Ozs7OzsiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
