(function (chai) {
  'use strict';

  // Managing size
  // @param  {object} frame описывает размеры рамки, в которые должно быть вписано изображение
  // @param  {object} given описывает размеры изображения, которые нужно подогнать под рамку
  // @return {object} новый объект, который будет содержать изменённые размеры изображения
  function resize(frame, given) {
    let width = given.width;
    let height = given.height;
    if (width > frame.width) {
      const multiplier = width / frame.width;
      width = frame.width;
      height = Math.floor(height / multiplier);
    }
    if (height > frame.height) {
      const multiplier = height / frame.height;
      height = frame.height;
      width = Math.floor(width / multiplier);
    }
    return {width, height};
  }

  const createTestForFrame = (frame) => {
    const assertRatio = (given, expected) => {
      const actual = resize(frame, given);
      chai.assert.deepEqual(actual, expected);
    };

    const createTest = (expected, multiplier) => {
      const given = {
        width: Math.floor(expected.width * multiplier),
        height: Math.floor(expected.height * multiplier)
      };
      it(`shrink ${multiplier}x: ${given.width}x${given.height} => ${expected.width}x${expected.height}`, () => {
        assertRatio(given, expected);
      });
    };

    const sequence = (expected) => {
      createTest(expected, 8);
      createTest(expected, 7);
      createTest(expected, 5);
      createTest(expected, 4);
      createTest(expected, 3);
      createTest(expected, 2);
      createTest(expected, 1);
    };

    describe(`Resize into frame: ${frame.width}x${frame.height}`, () => {

      describe(`when "width === height"`, () => {
        sequence({width: frame.width, height: frame.height});
      });

      describe(`when "width > height"`, () => {
        sequence({width: frame.width, height: Math.floor(frame.height / 2)});
      });

      describe(`when "width < height"`, () => {
        sequence({width: Math.floor(frame.width / 2), height: frame.height});
      });

    });
  };

  createTestForFrame({width: 256, height: 256});
  createTestForFrame({width: 256, height: 128});

  createTestForFrame({width: 468, height: 458});
  createTestForFrame({width: 705, height: 455});
  createTestForFrame({width: 304, height: 455});

}(chai));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdHMvcmVzaXplLnRlc3QuanMiLCJzb3VyY2VzIjpbInNyYy9qcy9yZXNpemUuanMiLCJzcmMvanMvdGVzdHMvcmVzaXplLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTWFuYWdpbmcgc2l6ZVxuLy8gQHBhcmFtICB7b2JqZWN0fSBmcmFtZSDQvtC/0LjRgdGL0LLQsNC10YIg0YDQsNC30LzQtdGA0Ysg0YDQsNC80LrQuCwg0LIg0LrQvtGC0L7RgNGL0LUg0LTQvtC70LbQvdC+INCx0YvRgtGMINCy0L/QuNGB0LDQvdC+INC40LfQvtCx0YDQsNC20LXQvdC40LVcbi8vIEBwYXJhbSAge29iamVjdH0gZ2l2ZW4g0L7Qv9C40YHRi9Cy0LDQtdGCINGA0LDQt9C80LXRgNGLINC40LfQvtCx0YDQsNC20LXQvdC40Y8sINC60L7RgtC+0YDRi9C1INC90YPQttC90L4g0L/QvtC00L7Qs9C90LDRgtGMINC/0L7QtCDRgNCw0LzQutGDXG4vLyBAcmV0dXJuIHtvYmplY3R9INC90L7QstGL0Lkg0L7QsdGK0LXQutGCLCDQutC+0YLQvtGA0YvQuSDQsdGD0LTQtdGCINGB0L7QtNC10YDQttCw0YLRjCDQuNC30LzQtdC90ZHQvdC90YvQtSDRgNCw0LfQvNC10YDRiyDQuNC30L7QsdGA0LDQttC10L3QuNGPXG5leHBvcnQgZGVmYXVsdCAgZnVuY3Rpb24gcmVzaXplKGZyYW1lLCBnaXZlbikge1xuICBsZXQgd2lkdGggPSBnaXZlbi53aWR0aDtcbiAgbGV0IGhlaWdodCA9IGdpdmVuLmhlaWdodDtcbiAgaWYgKHdpZHRoID4gZnJhbWUud2lkdGgpIHtcbiAgICBjb25zdCBtdWx0aXBsaWVyID0gd2lkdGggLyBmcmFtZS53aWR0aDtcbiAgICB3aWR0aCA9IGZyYW1lLndpZHRoO1xuICAgIGhlaWdodCA9IE1hdGguZmxvb3IoaGVpZ2h0IC8gbXVsdGlwbGllcik7XG4gIH1cbiAgaWYgKGhlaWdodCA+IGZyYW1lLmhlaWdodCkge1xuICAgIGNvbnN0IG11bHRpcGxpZXIgPSBoZWlnaHQgLyBmcmFtZS5oZWlnaHQ7XG4gICAgaGVpZ2h0ID0gZnJhbWUuaGVpZ2h0O1xuICAgIHdpZHRoID0gTWF0aC5mbG9vcih3aWR0aCAvIG11bHRpcGxpZXIpO1xuICB9XG4gIHJldHVybiB7d2lkdGgsIGhlaWdodH07XG59XG4iLCJpbXBvcnQge2Fzc2VydH0gZnJvbSAnY2hhaSc7XG5pbXBvcnQgcmVzaXplIGZyb20gJy4uL3Jlc2l6ZS5qcyc7XG5cbmNvbnN0IGNyZWF0ZVRlc3RGb3JGcmFtZSA9IChmcmFtZSkgPT4ge1xuICBjb25zdCBhc3NlcnRSYXRpbyA9IChnaXZlbiwgZXhwZWN0ZWQpID0+IHtcbiAgICBjb25zdCBhY3R1YWwgPSByZXNpemUoZnJhbWUsIGdpdmVuKTtcbiAgICBhc3NlcnQuZGVlcEVxdWFsKGFjdHVhbCwgZXhwZWN0ZWQpO1xuICB9O1xuXG4gIGNvbnN0IGNyZWF0ZVRlc3QgPSAoZXhwZWN0ZWQsIG11bHRpcGxpZXIpID0+IHtcbiAgICBjb25zdCBnaXZlbiA9IHtcbiAgICAgIHdpZHRoOiBNYXRoLmZsb29yKGV4cGVjdGVkLndpZHRoICogbXVsdGlwbGllciksXG4gICAgICBoZWlnaHQ6IE1hdGguZmxvb3IoZXhwZWN0ZWQuaGVpZ2h0ICogbXVsdGlwbGllcilcbiAgICB9O1xuICAgIGl0KGBzaHJpbmsgJHttdWx0aXBsaWVyfXg6ICR7Z2l2ZW4ud2lkdGh9eCR7Z2l2ZW4uaGVpZ2h0fSA9PiAke2V4cGVjdGVkLndpZHRofXgke2V4cGVjdGVkLmhlaWdodH1gLCAoKSA9PiB7XG4gICAgICBhc3NlcnRSYXRpbyhnaXZlbiwgZXhwZWN0ZWQpO1xuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IHNlcXVlbmNlID0gKGV4cGVjdGVkKSA9PiB7XG4gICAgY3JlYXRlVGVzdChleHBlY3RlZCwgOCk7XG4gICAgY3JlYXRlVGVzdChleHBlY3RlZCwgNyk7XG4gICAgY3JlYXRlVGVzdChleHBlY3RlZCwgNSk7XG4gICAgY3JlYXRlVGVzdChleHBlY3RlZCwgNCk7XG4gICAgY3JlYXRlVGVzdChleHBlY3RlZCwgMyk7XG4gICAgY3JlYXRlVGVzdChleHBlY3RlZCwgMik7XG4gICAgY3JlYXRlVGVzdChleHBlY3RlZCwgMSk7XG4gIH07XG5cbiAgZGVzY3JpYmUoYFJlc2l6ZSBpbnRvIGZyYW1lOiAke2ZyYW1lLndpZHRofXgke2ZyYW1lLmhlaWdodH1gLCAoKSA9PiB7XG5cbiAgICBkZXNjcmliZShgd2hlbiBcIndpZHRoID09PSBoZWlnaHRcImAsICgpID0+IHtcbiAgICAgIHNlcXVlbmNlKHt3aWR0aDogZnJhbWUud2lkdGgsIGhlaWdodDogZnJhbWUuaGVpZ2h0fSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShgd2hlbiBcIndpZHRoID4gaGVpZ2h0XCJgLCAoKSA9PiB7XG4gICAgICBzZXF1ZW5jZSh7d2lkdGg6IGZyYW1lLndpZHRoLCBoZWlnaHQ6IE1hdGguZmxvb3IoZnJhbWUuaGVpZ2h0IC8gMil9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKGB3aGVuIFwid2lkdGggPCBoZWlnaHRcImAsICgpID0+IHtcbiAgICAgIHNlcXVlbmNlKHt3aWR0aDogTWF0aC5mbG9vcihmcmFtZS53aWR0aCAvIDIpLCBoZWlnaHQ6IGZyYW1lLmhlaWdodH0pO1xuICAgIH0pO1xuXG4gIH0pO1xufTtcblxuY3JlYXRlVGVzdEZvckZyYW1lKHt3aWR0aDogMjU2LCBoZWlnaHQ6IDI1Nn0pO1xuY3JlYXRlVGVzdEZvckZyYW1lKHt3aWR0aDogMjU2LCBoZWlnaHQ6IDEyOH0pO1xuXG5jcmVhdGVUZXN0Rm9yRnJhbWUoe3dpZHRoOiA0NjgsIGhlaWdodDogNDU4fSk7XG5jcmVhdGVUZXN0Rm9yRnJhbWUoe3dpZHRoOiA3MDUsIGhlaWdodDogNDU1fSk7XG5jcmVhdGVUZXN0Rm9yRnJhbWUoe3dpZHRoOiAzMDQsIGhlaWdodDogNDU1fSk7XG4iXSwibmFtZXMiOlsiYXNzZXJ0Il0sIm1hcHBpbmdzIjoiOzs7RUFBQTtFQUNBO0VBQ0E7RUFDQTtFQUNnQixTQUFTLE1BQU0sQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFO0VBQzlDLEVBQUUsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztFQUMxQixFQUFFLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7RUFDNUIsRUFBRSxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxFQUFFO0VBQzNCLElBQUksTUFBTSxVQUFVLEdBQUcsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7RUFDM0MsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztFQUN4QixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsQ0FBQztFQUM3QyxHQUFHO0VBQ0gsRUFBRSxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFO0VBQzdCLElBQUksTUFBTSxVQUFVLEdBQUcsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7RUFDN0MsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztFQUMxQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUMsQ0FBQztFQUMzQyxHQUFHO0VBQ0gsRUFBRSxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0VBQ3pCOztFQ2ZBLE1BQU0sa0JBQWtCLEdBQUcsQ0FBQyxLQUFLLEtBQUs7RUFDdEMsRUFBRSxNQUFNLFdBQVcsR0FBRyxDQUFDLEtBQUssRUFBRSxRQUFRLEtBQUs7RUFDM0MsSUFBSSxNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxDQUFDO0VBQ3hDLElBQUlBLFdBQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0VBQ3ZDLEdBQUcsQ0FBQztBQUNKO0VBQ0EsRUFBRSxNQUFNLFVBQVUsR0FBRyxDQUFDLFFBQVEsRUFBRSxVQUFVLEtBQUs7RUFDL0MsSUFBSSxNQUFNLEtBQUssR0FBRztFQUNsQixNQUFNLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDO0VBQ3BELE1BQU0sTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUM7RUFDdEQsS0FBSyxDQUFDO0VBQ04sSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNO0VBQzlHLE1BQU0sV0FBVyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQztFQUNuQyxLQUFLLENBQUMsQ0FBQztFQUNQLEdBQUcsQ0FBQztBQUNKO0VBQ0EsRUFBRSxNQUFNLFFBQVEsR0FBRyxDQUFDLFFBQVEsS0FBSztFQUNqQyxJQUFJLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDNUIsSUFBSSxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzVCLElBQUksVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUM1QixJQUFJLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDNUIsSUFBSSxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzVCLElBQUksVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUM1QixJQUFJLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDNUIsR0FBRyxDQUFDO0FBQ0o7RUFDQSxFQUFFLFFBQVEsQ0FBQyxDQUFDLG1CQUFtQixFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU07QUFDdEU7RUFDQSxJQUFJLFFBQVEsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLEVBQUUsTUFBTTtFQUM5QyxNQUFNLFFBQVEsQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUMzRCxLQUFLLENBQUMsQ0FBQztBQUNQO0VBQ0EsSUFBSSxRQUFRLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLE1BQU07RUFDNUMsTUFBTSxRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMzRSxLQUFLLENBQUMsQ0FBQztBQUNQO0VBQ0EsSUFBSSxRQUFRLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLE1BQU07RUFDNUMsTUFBTSxRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztFQUMzRSxLQUFLLENBQUMsQ0FBQztBQUNQO0VBQ0EsR0FBRyxDQUFDLENBQUM7RUFDTCxDQUFDLENBQUM7QUFDRjtFQUNBLGtCQUFrQixDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUM5QyxrQkFBa0IsQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDOUM7RUFDQSxrQkFBa0IsQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDOUMsa0JBQWtCLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQzlDLGtCQUFrQixDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7Ozs7Iiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
