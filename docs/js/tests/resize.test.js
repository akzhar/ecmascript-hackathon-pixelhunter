(function (chai) {
  'use strict';

  // Managing size
  // @param  {object} frame описывает размеры рамки, в которые должно быть вписано изображение
  // @param  {object} given описывает ширину и высоту изображения, которое нужно подогнать под рамку
  // @return {object} новый объект, который будет содержать изменённые размеры изображения
  function resize(frame, given) {
    let width = given.width;
    let height = given.height;
    if (width > frame.width) {
      const multiplier = width / frame.width;
      width = frame.width;
      height = Math.floor(height / multiplier);
    }
    if (height > frame.height) {
      const multiplier = height / frame.height;
      height = frame.height;
      width = Math.floor(width / multiplier);
    }
    return {width, height};
  }

  const createTestForFrame = (frame) => {
    const assertRatio = (given, expected) => {
      const actual = resize(frame, given);
      chai.assert.deepEqual(actual, expected);
    };

    const createTest = (expected, multiplier) => {
      const given = {
        width: Math.floor(expected.width * multiplier),
        height: Math.floor(expected.height * multiplier)
      };
      it(`shrink ${multiplier}x: ${given.width}x${given.height} => ${expected.width}x${expected.height}`, () => {
        assertRatio(given, expected);
      });
    };

    const sequence = (expected) => {
      createTest(expected, 8);
      createTest(expected, 7);
      createTest(expected, 5);
      createTest(expected, 4);
      createTest(expected, 3);
      createTest(expected, 2);
      createTest(expected, 1);
    };

    describe(`Resize into frame: ${frame.width}x${frame.height}`, () => {

      describe(`when "width === height"`, () => {
        sequence({width: frame.width, height: frame.height});
      });

      describe(`when "width > height"`, () => {
        sequence({width: frame.width, height: Math.floor(frame.height / 2)});
      });

      describe(`when "width < height"`, () => {
        sequence({width: Math.floor(frame.width / 2), height: frame.height});
      });

    });
  };

  createTestForFrame({width: 256, height: 256});
  createTestForFrame({width: 256, height: 128});

  createTestForFrame({width: 468, height: 458});
  createTestForFrame({width: 705, height: 455});
  createTestForFrame({width: 304, height: 455});

}(chai));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdHMvcmVzaXplLnRlc3QuanMiLCJzb3VyY2VzIjpbInNyYy9qcy9yZXNpemUuanMiLCJzcmMvanMvdGVzdHMvcmVzaXplLnRlc3QuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gTWFuYWdpbmcgc2l6ZVxuLy8gQHBhcmFtICB7b2JqZWN0fSBmcmFtZSDQvtC/0LjRgdGL0LLQsNC10YIg0YDQsNC30LzQtdGA0Ysg0YDQsNC80LrQuCwg0LIg0LrQvtGC0L7RgNGL0LUg0LTQvtC70LbQvdC+INCx0YvRgtGMINCy0L/QuNGB0LDQvdC+INC40LfQvtCx0YDQsNC20LXQvdC40LVcbi8vIEBwYXJhbSAge29iamVjdH0gZ2l2ZW4g0L7Qv9C40YHRi9Cy0LDQtdGCINGI0LjRgNC40L3RgyDQuCDQstGL0YHQvtGC0YMg0LjQt9C+0LHRgNCw0LbQtdC90LjRjywg0LrQvtGC0L7RgNC+0LUg0L3Rg9C20L3QviDQv9C+0LTQvtCz0L3QsNGC0Ywg0L/QvtC0INGA0LDQvNC60YNcbi8vIEByZXR1cm4ge29iamVjdH0g0L3QvtCy0YvQuSDQvtCx0YrQtdC60YIsINC60L7RgtC+0YDRi9C5INCx0YPQtNC10YIg0YHQvtC00LXRgNC20LDRgtGMINC40LfQvNC10L3RkdC90L3Ri9C1INGA0LDQt9C80LXRgNGLINC40LfQvtCx0YDQsNC20LXQvdC40Y9cbmV4cG9ydCBkZWZhdWx0ICBmdW5jdGlvbiByZXNpemUoZnJhbWUsIGdpdmVuKSB7XG4gIGxldCB3aWR0aCA9IGdpdmVuLndpZHRoO1xuICBsZXQgaGVpZ2h0ID0gZ2l2ZW4uaGVpZ2h0O1xuICBpZiAod2lkdGggPiBmcmFtZS53aWR0aCkge1xuICAgIGNvbnN0IG11bHRpcGxpZXIgPSB3aWR0aCAvIGZyYW1lLndpZHRoO1xuICAgIHdpZHRoID0gZnJhbWUud2lkdGg7XG4gICAgaGVpZ2h0ID0gTWF0aC5mbG9vcihoZWlnaHQgLyBtdWx0aXBsaWVyKTtcbiAgfVxuICBpZiAoaGVpZ2h0ID4gZnJhbWUuaGVpZ2h0KSB7XG4gICAgY29uc3QgbXVsdGlwbGllciA9IGhlaWdodCAvIGZyYW1lLmhlaWdodDtcbiAgICBoZWlnaHQgPSBmcmFtZS5oZWlnaHQ7XG4gICAgd2lkdGggPSBNYXRoLmZsb29yKHdpZHRoIC8gbXVsdGlwbGllcik7XG4gIH1cbiAgcmV0dXJuIHt3aWR0aCwgaGVpZ2h0fTtcbn1cbiIsImltcG9ydCB7YXNzZXJ0fSBmcm9tICdjaGFpJztcbmltcG9ydCByZXNpemUgZnJvbSAnLi4vcmVzaXplLmpzJztcblxuY29uc3QgY3JlYXRlVGVzdEZvckZyYW1lID0gKGZyYW1lKSA9PiB7XG4gIGNvbnN0IGFzc2VydFJhdGlvID0gKGdpdmVuLCBleHBlY3RlZCkgPT4ge1xuICAgIGNvbnN0IGFjdHVhbCA9IHJlc2l6ZShmcmFtZSwgZ2l2ZW4pO1xuICAgIGFzc2VydC5kZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCk7XG4gIH07XG5cbiAgY29uc3QgY3JlYXRlVGVzdCA9IChleHBlY3RlZCwgbXVsdGlwbGllcikgPT4ge1xuICAgIGNvbnN0IGdpdmVuID0ge1xuICAgICAgd2lkdGg6IE1hdGguZmxvb3IoZXhwZWN0ZWQud2lkdGggKiBtdWx0aXBsaWVyKSxcbiAgICAgIGhlaWdodDogTWF0aC5mbG9vcihleHBlY3RlZC5oZWlnaHQgKiBtdWx0aXBsaWVyKVxuICAgIH07XG4gICAgaXQoYHNocmluayAke211bHRpcGxpZXJ9eDogJHtnaXZlbi53aWR0aH14JHtnaXZlbi5oZWlnaHR9ID0+ICR7ZXhwZWN0ZWQud2lkdGh9eCR7ZXhwZWN0ZWQuaGVpZ2h0fWAsICgpID0+IHtcbiAgICAgIGFzc2VydFJhdGlvKGdpdmVuLCBleHBlY3RlZCk7XG4gICAgfSk7XG4gIH07XG5cbiAgY29uc3Qgc2VxdWVuY2UgPSAoZXhwZWN0ZWQpID0+IHtcbiAgICBjcmVhdGVUZXN0KGV4cGVjdGVkLCA4KTtcbiAgICBjcmVhdGVUZXN0KGV4cGVjdGVkLCA3KTtcbiAgICBjcmVhdGVUZXN0KGV4cGVjdGVkLCA1KTtcbiAgICBjcmVhdGVUZXN0KGV4cGVjdGVkLCA0KTtcbiAgICBjcmVhdGVUZXN0KGV4cGVjdGVkLCAzKTtcbiAgICBjcmVhdGVUZXN0KGV4cGVjdGVkLCAyKTtcbiAgICBjcmVhdGVUZXN0KGV4cGVjdGVkLCAxKTtcbiAgfTtcblxuICBkZXNjcmliZShgUmVzaXplIGludG8gZnJhbWU6ICR7ZnJhbWUud2lkdGh9eCR7ZnJhbWUuaGVpZ2h0fWAsICgpID0+IHtcblxuICAgIGRlc2NyaWJlKGB3aGVuIFwid2lkdGggPT09IGhlaWdodFwiYCwgKCkgPT4ge1xuICAgICAgc2VxdWVuY2Uoe3dpZHRoOiBmcmFtZS53aWR0aCwgaGVpZ2h0OiBmcmFtZS5oZWlnaHR9KTtcbiAgICB9KTtcblxuICAgIGRlc2NyaWJlKGB3aGVuIFwid2lkdGggPiBoZWlnaHRcImAsICgpID0+IHtcbiAgICAgIHNlcXVlbmNlKHt3aWR0aDogZnJhbWUud2lkdGgsIGhlaWdodDogTWF0aC5mbG9vcihmcmFtZS5oZWlnaHQgLyAyKX0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoYHdoZW4gXCJ3aWR0aCA8IGhlaWdodFwiYCwgKCkgPT4ge1xuICAgICAgc2VxdWVuY2Uoe3dpZHRoOiBNYXRoLmZsb29yKGZyYW1lLndpZHRoIC8gMiksIGhlaWdodDogZnJhbWUuaGVpZ2h0fSk7XG4gICAgfSk7XG5cbiAgfSk7XG59O1xuXG5jcmVhdGVUZXN0Rm9yRnJhbWUoe3dpZHRoOiAyNTYsIGhlaWdodDogMjU2fSk7XG5jcmVhdGVUZXN0Rm9yRnJhbWUoe3dpZHRoOiAyNTYsIGhlaWdodDogMTI4fSk7XG5cbmNyZWF0ZVRlc3RGb3JGcmFtZSh7d2lkdGg6IDQ2OCwgaGVpZ2h0OiA0NTh9KTtcbmNyZWF0ZVRlc3RGb3JGcmFtZSh7d2lkdGg6IDcwNSwgaGVpZ2h0OiA0NTV9KTtcbmNyZWF0ZVRlc3RGb3JGcmFtZSh7d2lkdGg6IDMwNCwgaGVpZ2h0OiA0NTV9KTtcbiJdLCJuYW1lcyI6WyJhc3NlcnQiXSwibWFwcGluZ3MiOiI7OztFQUFBO0VBQ0E7RUFDQTtFQUNBO0VBQ2dC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
