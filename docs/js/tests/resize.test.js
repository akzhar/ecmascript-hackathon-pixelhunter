(function (chai) {
  'use strict';

  // Managing size
  // @param  {object} frame описывает размеры рамки, в которые должно быть вписано изображение
  // @param  {object} given описывает размеры изображения, которые нужно подогнать под рамку
  // @return {object} новый объект, который будет содержать изменённые размеры изображения
  function resize(frame, given) {
    let width = given.width;
    let height = given.height;
    if (width > frame.width) {
      const multiplier = width / frame.width;
      width = frame.width;
      height = Math.floor(height / multiplier);
    }
    if (height > frame.height) {
      const multiplier = height / frame.height;
      height = frame.height;
      width = Math.floor(width / multiplier);
    }
    return {width, height};
  }

  const createTestForFrame = (frame) => {
    const assertRatio = (given, expected) => {
      const actual = resize(frame, given);
      chai.assert.deepEqual(actual, expected);
    };

    const createTest = (expected, multiplier) => {
      const given = {
        width: Math.floor(expected.width * multiplier),
        height: Math.floor(expected.height * multiplier)
      };
      it(`shrink ${multiplier}x: ${given.width}x${given.height} => ${expected.width}x${expected.height}`, () => {
        assertRatio(given, expected);
      });
    };

    const sequence = (expected) => {
      createTest(expected, 8);
      createTest(expected, 7);
      createTest(expected, 5);
      createTest(expected, 4);
      createTest(expected, 3);
      createTest(expected, 2);
      createTest(expected, 1);
    };

    describe(`Resize into frame: ${frame.width}x${frame.height}`, () => {

      describe(`when "width === height"`, () => {
        sequence({width: frame.width, height: frame.height});
      });

      describe(`when "width > height"`, () => {
        sequence({width: frame.width, height: Math.floor(frame.height / 2)});
      });

      describe(`when "width < height"`, () => {
        sequence({width: Math.floor(frame.width / 2), height: frame.height});
      });

    });
  };

  createTestForFrame({width: 256, height: 256});
  createTestForFrame({width: 256, height: 128});

  createTestForFrame({width: 468, height: 458});
  createTestForFrame({width: 705, height: 455});
  createTestForFrame({width: 304, height: 455});

}(chai));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdHMvcmVzaXplLnRlc3QuanMiLCJzb3VyY2VzIjpbImpzL3Jlc2l6ZS5qcyIsImpzL3Rlc3RzL3Jlc2l6ZS50ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIE1hbmFnaW5nIHNpemVcbi8vIEBwYXJhbSAge29iamVjdH0gZnJhbWUg0L7Qv9C40YHRi9Cy0LDQtdGCINGA0LDQt9C80LXRgNGLINGA0LDQvNC60LgsINCyINC60L7RgtC+0YDRi9C1INC00L7Qu9C20L3QviDQsdGL0YLRjCDQstC/0LjRgdCw0L3QviDQuNC30L7QsdGA0LDQttC10L3QuNC1XG4vLyBAcGFyYW0gIHtvYmplY3R9IGdpdmVuINC+0L/QuNGB0YvQstCw0LXRgiDRgNCw0LfQvNC10YDRiyDQuNC30L7QsdGA0LDQttC10L3QuNGPLCDQutC+0YLQvtGA0YvQtSDQvdGD0LbQvdC+INC/0L7QtNC+0LPQvdCw0YLRjCDQv9C+0LQg0YDQsNC80LrRg1xuLy8gQHJldHVybiB7b2JqZWN0fSDQvdC+0LLRi9C5INC+0LHRitC10LrRgiwg0LrQvtGC0L7RgNGL0Lkg0LHRg9C00LXRgiDRgdC+0LTQtdGA0LbQsNGC0Ywg0LjQt9C80LXQvdGR0L3QvdGL0LUg0YDQsNC30LzQtdGA0Ysg0LjQt9C+0LHRgNCw0LbQtdC90LjRj1xuZXhwb3J0IGRlZmF1bHQgIGZ1bmN0aW9uIHJlc2l6ZShmcmFtZSwgZ2l2ZW4pIHtcbiAgbGV0IHdpZHRoID0gZ2l2ZW4ud2lkdGg7XG4gIGxldCBoZWlnaHQgPSBnaXZlbi5oZWlnaHQ7XG4gIGlmICh3aWR0aCA+IGZyYW1lLndpZHRoKSB7XG4gICAgY29uc3QgbXVsdGlwbGllciA9IHdpZHRoIC8gZnJhbWUud2lkdGg7XG4gICAgd2lkdGggPSBmcmFtZS53aWR0aDtcbiAgICBoZWlnaHQgPSBNYXRoLmZsb29yKGhlaWdodCAvIG11bHRpcGxpZXIpO1xuICB9XG4gIGlmIChoZWlnaHQgPiBmcmFtZS5oZWlnaHQpIHtcbiAgICBjb25zdCBtdWx0aXBsaWVyID0gaGVpZ2h0IC8gZnJhbWUuaGVpZ2h0O1xuICAgIGhlaWdodCA9IGZyYW1lLmhlaWdodDtcbiAgICB3aWR0aCA9IE1hdGguZmxvb3Iod2lkdGggLyBtdWx0aXBsaWVyKTtcbiAgfVxuICByZXR1cm4ge3dpZHRoLCBoZWlnaHR9O1xufVxuIiwiaW1wb3J0IHthc3NlcnR9IGZyb20gJ2NoYWknO1xuaW1wb3J0IHJlc2l6ZSBmcm9tICcuLi9yZXNpemUuanMnO1xuXG5jb25zdCBjcmVhdGVUZXN0Rm9yRnJhbWUgPSAoZnJhbWUpID0+IHtcbiAgY29uc3QgYXNzZXJ0UmF0aW8gPSAoZ2l2ZW4sIGV4cGVjdGVkKSA9PiB7XG4gICAgY29uc3QgYWN0dWFsID0gcmVzaXplKGZyYW1lLCBnaXZlbik7XG4gICAgYXNzZXJ0LmRlZXBFcXVhbChhY3R1YWwsIGV4cGVjdGVkKTtcbiAgfTtcblxuICBjb25zdCBjcmVhdGVUZXN0ID0gKGV4cGVjdGVkLCBtdWx0aXBsaWVyKSA9PiB7XG4gICAgY29uc3QgZ2l2ZW4gPSB7XG4gICAgICB3aWR0aDogTWF0aC5mbG9vcihleHBlY3RlZC53aWR0aCAqIG11bHRpcGxpZXIpLFxuICAgICAgaGVpZ2h0OiBNYXRoLmZsb29yKGV4cGVjdGVkLmhlaWdodCAqIG11bHRpcGxpZXIpXG4gICAgfTtcbiAgICBpdChgc2hyaW5rICR7bXVsdGlwbGllcn14OiAke2dpdmVuLndpZHRofXgke2dpdmVuLmhlaWdodH0gPT4gJHtleHBlY3RlZC53aWR0aH14JHtleHBlY3RlZC5oZWlnaHR9YCwgKCkgPT4ge1xuICAgICAgYXNzZXJ0UmF0aW8oZ2l2ZW4sIGV4cGVjdGVkKTtcbiAgICB9KTtcbiAgfTtcblxuICBjb25zdCBzZXF1ZW5jZSA9IChleHBlY3RlZCkgPT4ge1xuICAgIGNyZWF0ZVRlc3QoZXhwZWN0ZWQsIDgpO1xuICAgIGNyZWF0ZVRlc3QoZXhwZWN0ZWQsIDcpO1xuICAgIGNyZWF0ZVRlc3QoZXhwZWN0ZWQsIDUpO1xuICAgIGNyZWF0ZVRlc3QoZXhwZWN0ZWQsIDQpO1xuICAgIGNyZWF0ZVRlc3QoZXhwZWN0ZWQsIDMpO1xuICAgIGNyZWF0ZVRlc3QoZXhwZWN0ZWQsIDIpO1xuICAgIGNyZWF0ZVRlc3QoZXhwZWN0ZWQsIDEpO1xuICB9O1xuXG4gIGRlc2NyaWJlKGBSZXNpemUgaW50byBmcmFtZTogJHtmcmFtZS53aWR0aH14JHtmcmFtZS5oZWlnaHR9YCwgKCkgPT4ge1xuXG4gICAgZGVzY3JpYmUoYHdoZW4gXCJ3aWR0aCA9PT0gaGVpZ2h0XCJgLCAoKSA9PiB7XG4gICAgICBzZXF1ZW5jZSh7d2lkdGg6IGZyYW1lLndpZHRoLCBoZWlnaHQ6IGZyYW1lLmhlaWdodH0pO1xuICAgIH0pO1xuXG4gICAgZGVzY3JpYmUoYHdoZW4gXCJ3aWR0aCA+IGhlaWdodFwiYCwgKCkgPT4ge1xuICAgICAgc2VxdWVuY2Uoe3dpZHRoOiBmcmFtZS53aWR0aCwgaGVpZ2h0OiBNYXRoLmZsb29yKGZyYW1lLmhlaWdodCAvIDIpfSk7XG4gICAgfSk7XG5cbiAgICBkZXNjcmliZShgd2hlbiBcIndpZHRoIDwgaGVpZ2h0XCJgLCAoKSA9PiB7XG4gICAgICBzZXF1ZW5jZSh7d2lkdGg6IE1hdGguZmxvb3IoZnJhbWUud2lkdGggLyAyKSwgaGVpZ2h0OiBmcmFtZS5oZWlnaHR9KTtcbiAgICB9KTtcblxuICB9KTtcbn07XG5cbmNyZWF0ZVRlc3RGb3JGcmFtZSh7d2lkdGg6IDI1NiwgaGVpZ2h0OiAyNTZ9KTtcbmNyZWF0ZVRlc3RGb3JGcmFtZSh7d2lkdGg6IDI1NiwgaGVpZ2h0OiAxMjh9KTtcblxuY3JlYXRlVGVzdEZvckZyYW1lKHt3aWR0aDogNDY4LCBoZWlnaHQ6IDQ1OH0pO1xuY3JlYXRlVGVzdEZvckZyYW1lKHt3aWR0aDogNzA1LCBoZWlnaHQ6IDQ1NX0pO1xuY3JlYXRlVGVzdEZvckZyYW1lKHt3aWR0aDogMzA0LCBoZWlnaHQ6IDQ1NX0pO1xuIl0sIm5hbWVzIjpbImFzc2VydCJdLCJtYXBwaW5ncyI6Ijs7O0VBQUE7RUFDQTtFQUNBO0VBQ0E7RUFDZ0IsU0FBUyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRTtFQUM5QyxFQUFFLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7RUFDMUIsRUFBRSxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0VBQzVCLEVBQUUsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRTtFQUMzQixJQUFJLE1BQU0sVUFBVSxHQUFHLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0VBQzNDLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7RUFDeEIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDLENBQUM7RUFDN0MsR0FBRztFQUNILEVBQUUsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRTtFQUM3QixJQUFJLE1BQU0sVUFBVSxHQUFHLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0VBQzdDLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7RUFDMUIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLENBQUM7RUFDM0MsR0FBRztFQUNILEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztFQUN6Qjs7RUNmQSxNQUFNLGtCQUFrQixHQUFHLENBQUMsS0FBSyxLQUFLO0VBQ3RDLEVBQUUsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFLLEVBQUUsUUFBUSxLQUFLO0VBQzNDLElBQUksTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztFQUN4QyxJQUFJQSxXQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztFQUN2QyxHQUFHLENBQUM7QUFDSjtFQUNBLEVBQUUsTUFBTSxVQUFVLEdBQUcsQ0FBQyxRQUFRLEVBQUUsVUFBVSxLQUFLO0VBQy9DLElBQUksTUFBTSxLQUFLLEdBQUc7RUFDbEIsTUFBTSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQztFQUNwRCxNQUFNLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsVUFBVSxDQUFDO0VBQ3RELEtBQUssQ0FBQztFQUNOLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsTUFBTTtFQUM5RyxNQUFNLFdBQVcsQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7RUFDbkMsS0FBSyxDQUFDLENBQUM7RUFDUCxHQUFHLENBQUM7QUFDSjtFQUNBLEVBQUUsTUFBTSxRQUFRLEdBQUcsQ0FBQyxRQUFRLEtBQUs7RUFDakMsSUFBSSxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzVCLElBQUksVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUM1QixJQUFJLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDNUIsSUFBSSxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzVCLElBQUksVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztFQUM1QixJQUFJLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUM7RUFDNUIsSUFBSSxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQzVCLEdBQUcsQ0FBQztBQUNKO0VBQ0EsRUFBRSxRQUFRLENBQUMsQ0FBQyxtQkFBbUIsRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNO0FBQ3RFO0VBQ0EsSUFBSSxRQUFRLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLE1BQU07RUFDOUMsTUFBTSxRQUFRLENBQUMsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDM0QsS0FBSyxDQUFDLENBQUM7QUFDUDtFQUNBLElBQUksUUFBUSxDQUFDLENBQUMscUJBQXFCLENBQUMsRUFBRSxNQUFNO0VBQzVDLE1BQU0sUUFBUSxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDM0UsS0FBSyxDQUFDLENBQUM7QUFDUDtFQUNBLElBQUksUUFBUSxDQUFDLENBQUMscUJBQXFCLENBQUMsRUFBRSxNQUFNO0VBQzVDLE1BQU0sUUFBUSxDQUFDLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDM0UsS0FBSyxDQUFDLENBQUM7QUFDUDtFQUNBLEdBQUcsQ0FBQyxDQUFDO0VBQ0wsQ0FBQyxDQUFDO0FBQ0Y7RUFDQSxrQkFBa0IsQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7RUFDOUMsa0JBQWtCLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQzlDO0VBQ0Esa0JBQWtCLENBQUMsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQzlDLGtCQUFrQixDQUFDLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztFQUM5QyxrQkFBa0IsQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDOzs7OyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
