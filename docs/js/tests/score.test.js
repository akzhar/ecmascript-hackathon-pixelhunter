(function (chai) {
  'use strict';

  // Scoring at the end of the game
  // @param  {array} answers массив ответов пользователя
  // @param  {integer} lives кол-во оставшихся жизней
  // @return {integer} кол-во набранных очков
  function getTotalScore(answers, lives) {
    if (answers.length < 10) {
      return -1;
    }
    const score = answers.reduce((acc, answer) => {
      if (answer.isOK) {
        acc += 100;
      }
      if (answer.time < 10) {
        acc += 50;
      }
      if (answer.time > 20) {
        acc -= 50;
      }
      return acc;
    }, 0);
    return score + lives * 50;
  }

  function getRightAnswersCount(answers) {
    return answers.filter((answer) => answer.isOK).length;
  }

  function getSpeedBonusCount(answers) {
    return answers.filter((answer) => answer.time < 10).length;
  }

  function getSlowPenaltyCount(answers) {
    return answers.filter((answer) => answer.time > 20).length;
  }

  // В блоке describe (набор тестов) указывается что будет тестировать этот блок тестов
  //   – Отвечает на вопрос «О чём эти тесты?»
  // В блоке it (тестовый случай) описывается, то что проверяет этот набор тестов
  //   – Отвечает на вопрос «Что делают эти проверки?»

  const notAllAnswers =
  [{
    isOK: true,
    time: 30
  }, {
    isOK: false,
    time: 5
  }];

  const allAnswersNotFastNotSlow =
  [{
    isOK: true,
    time: 11
  }, {
    isOK: true,
    time: 12
  }, {
    isOK: true,
    time: 11
  }, {
    isOK: true,
    time: 15
  }, {
    isOK: true,
    time: 19
  }, {
    isOK: true,
    time: 18
  }, {
    isOK: true,
    time: 17
  }, {
    isOK: true,
    time: 16
  }, {
    isOK: true,
    time: 18
  }, {
    isOK: true,
    time: 13
  }];

  describe(`Scoring at the end of the game`, () => {
    it(`should return -1 when not all answers (< 10) are given`, () => {
      chai.assert.equal(-1, getTotalScore(notAllAnswers, 2));
    });
    it(`should return 1150 when all answers are given (10) right, not fast but not slow (10 > time < 20) and all lives (4) are remain`, () => {
      chai.assert.equal(1150, getTotalScore(allAnswersNotFastNotSlow, 3));
    });
  });

  describe(`Сalc right asnwers`, () => {
    it(`should return 1`, () => {
      chai.assert.equal(1, getRightAnswersCount(notAllAnswers));
    });
    it(`should return 10`, () => {
      chai.assert.equal(10, getRightAnswersCount(allAnswersNotFastNotSlow));
    });
  });

  describe(`Сalc speed bonuses`, () => {
    it(`should return 1`, () => {
      chai.assert.equal(1, getSpeedBonusCount(notAllAnswers));
    });
  });

  describe(`Сalc slow penalties`, () => {
    it(`should return 1`, () => {
      chai.assert.equal(1, getSlowPenaltyCount(notAllAnswers));
    });
  });

}(chai));

//# sourceMappingURL=data:application/json;base64,
